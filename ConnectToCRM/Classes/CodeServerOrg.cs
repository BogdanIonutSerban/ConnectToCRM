//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ConnectToCRM.Classes
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "/codeserver/csapi";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);



        /// <summary>
        /// Get concept codes by classification id.
        /// </summary>
        /// <param name="status">Filter the results by concept code status. If not specified, results contain only active concept codes.</param>
        /// <param name="validOn">Filter the results by timestamp indicating date value when concept code must be valid. Date in the 'YYYY-MM-DD' format.</param>
        /// <param name="qvalue">Search criteria value which is used againts fields defined in 'qfields' parameter. Supported wild card is '*' (asterisk)</param>
        /// <param name="qfield">Fixed field name(s) to be used as search criteria targets.</param>
        /// <param name="modifiedAfter">Filter the results by timestamp indicating date value of last modification of concept code.Results contain those concept codes codes which have been changed during and after given date. Date in the 'YYYY-MM-DD' format.</param>
        /// <param name="sortBy">A field name by which concept codes should be sorted in ascending order. Empty values may be sorted first or last depending on the database engine.</param>
        /// <param name="pageSize">Maximum number of results per page</param>
        /// <param name="page">Refers to the page of the result list.</param>
        /// <param name="classificationId">Classification identifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ConceptCodes> GetConceptCodesFromDefaultVersionAsync(System.Collections.Generic.IEnumerable<Status> status, System.DateTimeOffset? validOn, string qvalue, System.Collections.Generic.IEnumerable<Qfield> qfield, System.DateTimeOffset? modifiedAfter, SortBy? sortBy, int? pageSize, int? page, string classificationId)
        {
            return GetConceptCodesFromDefaultVersionAsync(status, validOn, qvalue, qfield, modifiedAfter, sortBy, pageSize, page, classificationId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get concept codes by classification id.
        /// </summary>
        /// <param name="status">Filter the results by concept code status. If not specified, results contain only active concept codes.</param>
        /// <param name="validOn">Filter the results by timestamp indicating date value when concept code must be valid. Date in the 'YYYY-MM-DD' format.</param>
        /// <param name="qvalue">Search criteria value which is used againts fields defined in 'qfields' parameter. Supported wild card is '*' (asterisk)</param>
        /// <param name="qfield">Fixed field name(s) to be used as search criteria targets.</param>
        /// <param name="modifiedAfter">Filter the results by timestamp indicating date value of last modification of concept code.Results contain those concept codes codes which have been changed during and after given date. Date in the 'YYYY-MM-DD' format.</param>
        /// <param name="sortBy">A field name by which concept codes should be sorted in ascending order. Empty values may be sorted first or last depending on the database engine.</param>
        /// <param name="pageSize">Maximum number of results per page</param>
        /// <param name="page">Refers to the page of the result list.</param>
        /// <param name="classificationId">Classification identifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConceptCodes> GetConceptCodesFromDefaultVersionAsync(System.Collections.Generic.IEnumerable<Status> status, System.DateTimeOffset? validOn, string qvalue, System.Collections.Generic.IEnumerable<Qfield> qfield, System.DateTimeOffset? modifiedAfter, SortBy? sortBy, int? pageSize, int? page, string classificationId, System.Threading.CancellationToken cancellationToken)
        {
            if (classificationId == null)
                throw new System.ArgumentNullException("classificationId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v5/classifications/{classificationId}/conceptcodes?");
            urlBuilder_.Replace("{classificationId}", System.Uri.EscapeDataString(ConvertToString(classificationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (status != null)
            {
                foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (validOn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("validOn") + "=").Append(System.Uri.EscapeDataString(validOn.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qvalue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("qvalue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(qvalue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (qfield != null)
            {
                foreach (var item_ in qfield) { urlBuilder_.Append(System.Uri.EscapeDataString("qfield") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (modifiedAfter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedAfter") + "=").Append(System.Uri.EscapeDataString(modifiedAfter.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConceptCodes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("No Content - There are no concept codes or prices to list", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Bad Request - Request parameter value validation error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized - Authentication failure.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Forbidden - Client is not authorized to access or update the resource", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Not Found - Resource not found with given identifier", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 415)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unsupported Media Type", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
 
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Authentication information ie. username and password.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuthenticationRequest
    {
        /// <summary>
        /// name of authenticating user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Username { get; set; }

        /// <summary>
        /// password for authenticating user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response to successful authentication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuthenticationResponse
    {
        /// <summary>
        /// Authentication token to be used in Authorization header.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationToken", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AuthenticationToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Concept code status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROPOSAL")]
        PROPOSAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,

    }

    /// <summary>
    /// Price status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PriceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 1,

    }

    /// <summary>
    /// Fixed field name(s) to be used as search criteria targets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Qfield
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONCEPTCODEID")]
        CONCEPTCODEID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ABBREVIATION")]
        ABBREVIATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NAME")]
        NAME = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PARENTID")]
        PARENTID = 3,

    }

    /// <summary>
    /// Fixed price field name(s) to be used as search criteria targets
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PriceQfield
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRICEID")]
        PRICEID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTID")]
        PRODUCTID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCERID")]
        PRODUCERID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMERID")]
        CUSTOMERID = 3,

    }

    /// <summary>
    /// A field name by which concept codes should be sorted in ascending order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SortBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONCEPTCODEID")]
        CONCEPTCODEID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ABBREVIATION")]
        ABBREVIATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NAME")]
        NAME = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PARENTID")]
        PARENTID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BEGINDATE")]
        BEGINDATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATIONDATE")]
        EXPIRATIONDATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OID")]
        OID = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LASTMODIFIEDBY")]
        LASTMODIFIEDBY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LASTMODIFIEDDATE")]
        LASTMODIFIEDDATE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATEDATE")]
        CREATEDATE = 9,

    }

    /// <summary>
    /// A field name by which prices should be sorted in ascending order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PriceSortBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRICEID")]
        PRICEID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTID")]
        PRODUCTID = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCERID")]
        PRODUCERID = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMERID")]
        CUSTOMERID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PRICE1")]
        PRICE1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BEGINDATE")]
        BEGINDATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRATIONDATE")]
        EXPIRATIONDATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LASTMODIFIEDBY")]
        LASTMODIFIEDBY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LASTMODIFIEDDATE")]
        LASTMODIFIEDDATE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CREATEDATE")]
        CREATEDATE = 9,

    }

    /// <summary>
    /// Error/warning description
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Human readable, unique name of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Internal identifier used for correlation purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debug_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Debug_id { get; set; }

        /// <summary>
        /// Message describing the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Additional details for the error. Mandatory for client side 4xx errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDetail> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional details for the error. Mandatory element for status code 4xx responses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorDetail
    {
        /// <summary>
        /// Field in error if in body, else name of the path parameter or query parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// Value of the field in error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Reason for error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issue { get; set; }

        /// <summary>
        /// The location of the field in the error, either query, path, or body. If this field is not present, the default value is body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Concept code or price attribute. For concept codes an attribute with name "Abbreviation" is mandatory in POST and PUT requests. An attribute with name "HierarchyLevel" (used only for hierarchical classifications) is read only i.e. it is returned only by GET requests.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Attribute
    {
        /// <summary>
        /// Name of attribute.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Attribute value(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributeValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AttributeValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConceptCode
    {
        /// <summary>
        /// Classification identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationId { get; set; }

        /// <summary>
        /// Classification name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationName { get; set; }

        /// <summary>
        /// Version identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// Version name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionName { get; set; }

        /// <summary>
        /// Concept code identifier. Cannot be updated after insert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conceptCodeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConceptCodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status { get; set; }

        /// <summary>
        /// Validity beginning date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset BeginDate { get; set; }

        /// <summary>
        /// Validity expiration date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Last modified date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Name of last modifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Creation date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// Concept code attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attribute> Attributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConceptCodes
    {
        /// <summary>
        /// Array of concept codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conceptCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConceptCode> ConceptCodes1 { get; set; }

        /// <summary>
        /// Maximum number of concept codes in one page. If the value is same as the value of totalPages then further pages are not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        /// <summary>
        /// Current page number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        /// <summary>
        /// Total number of concept codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItems { get; set; }

        /// <summary>
        /// Total number of pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Price
    {
        /// <summary>
        /// Price list name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricelistName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricelistName { get; set; }

        /// <summary>
        /// Price identifier = OID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceId { get; set; }

        /// <summary>
        /// Price of product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Price1 { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PriceStatus Status { get; set; }

        /// <summary>
        /// Validity beginning date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset BeginDate { get; set; }

        /// <summary>
        /// Validity expiration date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Last modified date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Name of last modifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Creation date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateDate { get; set; }

        /// <summary>
        /// Price attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attribute> Attributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Prices
    {
        /// <summary>
        /// Array of prices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Price> Prices1 { get; set; }

        /// <summary>
        /// Maximum number of prices in one page. If the value is same as the value of totalPages then further pages are not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        /// <summary>
        /// Current page number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        /// <summary>
        /// Total number of pricess.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItems { get; set; }

        /// <summary>
        /// Total number of pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Version and price list field, field type, reference identification and field value qualifications
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Field
    {
        /// <summary>
        /// Name of the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        /// <summary>
        /// Type of the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldType FieldType { get; set; }

        /// <summary>
        /// Sub-type of attribute field. Used when fieldType is ATTRIBUTE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldSubType? FieldSubType { get; set; }

        /// <summary>
        /// Description of the field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldDescription { get; set; }

        /// <summary>
        /// If true, the field access is restricted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictedAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RestrictedAccess { get; set; }

        /// <summary>
        /// Referenced classification and version. Used when fieldType is REFERENCE.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referencedCodeSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReferencedCodeSystem ReferencedCodeSystem { get; set; }

        /// <summary>
        /// Used when fieldType is REFERENCE. Can field have multiple values (aka one-to-may reference)?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("multipleValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultipleValues { get; set; }

        /// <summary>
        /// Used when fieldType is REFERENCE. Value 'true' means that this field is 'backward reference' of a two-way-reference, value 'false' means that this field is normal reference or 'forward reference' of a two-way-reference. 'Backward reference' fields can not be written to in POST, PUT and PATCH requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backwardReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BackwardReference { get; set; }

        /// <summary>
        /// Used when fieldType is REFERENCE. Value 'true' means that the target concept code of a forward reference must have ACTIVE status. If the value is 'false', a target with PROPOSAL status is also accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activeTargetsOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ActiveTargetsOnly { get; set; }

        /// <summary>
        /// Field qualifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldQualifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldQualifications FieldQualifications { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CodeServer classification version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Version
    {
        /// <summary>
        /// Classification version concept code fields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("definitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Definitions { get; set; }

        /// <summary>
        /// Classification identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationId { get; set; }

        /// <summary>
        /// Classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationName { get; set; }

        /// <summary>
        /// Version identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// Version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status { get; set; }

        /// <summary>
        /// Validity beginning date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset BeginDate { get; set; }

        /// <summary>
        /// Validity expiration date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Version OID root
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oidRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OidRoot { get; set; }

        /// <summary>
        /// Next OID. Only relevant if oidRoot is not empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextOid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NextOid { get; set; }

        /// <summary>
        /// Is OID used as concept code id or not. Only relevant if oidRoot is not empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oid2id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Oid2id { get; set; }

        /// <summary>
        /// Type of hierarchy validation. Only relevant for versions in hierarchical classifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyIntegrity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionHierarchyIntegrity HierarchyIntegrity { get; set; }

        /// <summary>
        /// Optional names for hierarchy levels. Only relevant for versions in hierarchical classifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevelNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(25)]
        public System.Collections.Generic.ICollection<string> HierarchyLevelNames { get; set; }

        /// <summary>
        /// Last modified date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Name of last modifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CodeServer price list metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PriceList
    {
        /// <summary>
        /// Price list friendly name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pricelistName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PricelistName { get; set; }

        /// <summary>
        /// Product classification id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productClassificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductClassificationId { get; set; }

        /// <summary>
        /// Product classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productClassificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductClassificationName { get; set; }

        /// <summary>
        /// Product version id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productVersionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersionId { get; set; }

        /// <summary>
        /// Product version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productVersionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductVersionName { get; set; }

        /// <summary>
        /// Producers friendly name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producersName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducersName { get; set; }

        /// <summary>
        /// Producer classification id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerClassificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducerClassificationId { get; set; }

        /// <summary>
        /// Producer classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerClassificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducerClassificationName { get; set; }

        /// <summary>
        /// Producer version id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerVersionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducerVersionId { get; set; }

        /// <summary>
        /// Producer version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("producerVersionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProducerVersionName { get; set; }

        /// <summary>
        /// Customers friendly name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customersName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomersName { get; set; }

        /// <summary>
        /// Customer classification id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerClassificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerClassificationId { get; set; }

        /// <summary>
        /// Customer classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerClassificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerClassificationName { get; set; }

        /// <summary>
        /// Customer version id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerVersionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerVersionId { get; set; }

        /// <summary>
        /// Customer version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerVersionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerVersionName { get; set; }

        /// <summary>
        /// Fields of price
        /// </summary>
        [Newtonsoft.Json.JsonProperty("definitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Definitions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Concept code creation response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConceptCodeCreated
    {
        /// <summary>
        /// Concept code identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conceptCodeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConceptCodeId { get; set; }

        /// <summary>
        /// Creation date and time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreateDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// CodeServer classification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Classification
    {
        /// <summary>
        /// Classification identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationId { get; set; }

        /// <summary>
        /// Classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationName { get; set; }

        /// <summary>
        /// Classification type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ClassificationType ClassificationType { get; set; }

        /// <summary>
        /// Is Classification hierarchical or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hierarchical { get; set; }

        /// <summary>
        /// Classification belongs to these categories
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Category { get; set; }

        /// <summary>
        /// Whether a restricted access is assigned to the classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictedAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RestrictedAccess { get; set; }

        /// <summary>
        /// Whether a publications are prevented from this classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicationsBlocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PublicationsBlocked { get; set; }

        /// <summary>
        /// Whether concept codes of this classification has description fields with text formatting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedDescriptionFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FormattedDescriptionFields { get; set; }

        /// <summary>
        /// Additional information of classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Classification attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attribute> Attributes { get; set; }

        /// <summary>
        /// Classifications default version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultVersion DefaultVersion { get; set; }

        /// <summary>
        /// HATEOAS links to default version and to all versions of this classification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Classifications
    {
        /// <summary>
        /// Collection of classifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Classification> Classifications1 { get; set; }

        /// <summary>
        /// Maximum number of classifications in one page. If the value is same as the value of totalPages then further pages are not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageSize { get; set; }

        /// <summary>
        /// Current page number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }

        /// <summary>
        /// Total number of classifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItems { get; set; }

        /// <summary>
        /// Total number of pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalPages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Collection of specified classification's versions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ClassificationVersions
    {
        /// <summary>
        /// Classification identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationId { get; set; }

        /// <summary>
        /// Classification name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("classificationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationName { get; set; }

        /// <summary>
        /// Classification versions with limited version details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ClassificationVersion> Versions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ClassificationVersion
    {
        /// <summary>
        /// Version identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// Version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status { get; set; }

        /// <summary>
        /// Validity beginning date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beginDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset BeginDate { get; set; }

        /// <summary>
        /// Validity expiration date without time part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ExpirationDate { get; set; }

        /// <summary>
        /// Date and time of last modification on this version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Whether this is classifications default version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DefaultVersion { get; set; }

        /// <summary>
        /// HATEOAS link to full version details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Link> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// HATEOAS link
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Link
    {
        /// <summary>
        /// URL to specified resource(s)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Href { get; set; }

        /// <summary>
        /// Type of the URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rel { get; set; }

        /// <summary>
        /// HTTP method of the URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BASE")]
        BASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ATTRIBUTE")]
        ATTRIBUTE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REFERENCE")]
        REFERENCE = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldSubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
        NUMERIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORTTEXT")]
        SHORTTEXT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LONGTEXT")]
        LONGTEXT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FORMATTEDTEXT")]
        FORMATTEDTEXT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUESET")]
        VALUESET = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
        DATE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LINK")]
        LINK = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReferencedCodeSystem
    {
        [Newtonsoft.Json.JsonProperty("classificationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassificationId { get; set; }

        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Links> Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldQualifications
    {
        /// <summary>
        /// Minimum length for field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinLength { get; set; }

        /// <summary>
        /// Maximum length for field value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxLength { get; set; }

        /// <summary>
        /// Is value mandatory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mandatory { get; set; }

        /// <summary>
        /// Condition for being mandatory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mandatoryCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MandatoryCondition { get; set; }

        /// <summary>
        /// Value is allowed if this condition is fullfilled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueCondition { get; set; }

        /// <summary>
        /// Is the field value read only
        /// </summary>
        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// Should value be unique
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unique", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Unique { get; set; }

        /// <summary>
        /// Minimum value for numeric attribute value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueRangeMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueRangeMin { get; set; }

        /// <summary>
        /// Maximum value for numeric attribute value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueRangeMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ValueRangeMax { get; set; }

        /// <summary>
        /// Regular expression for value format
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// Condition for regular expression
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatCondition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatCondition { get; set; }

        /// <summary>
        /// Description for regular expression
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatDescription { get; set; }

        /// <summary>
        /// Allowed values for value set attributes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valueSetValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ValueSetValues { get; set; }

        /// <summary>
        /// Default value for the field. This value is initially inserted to field when new concept code is created if no value is specified for that field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VersionHierarchyIntegrity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT")]
        STRICT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOOSE")]
        LOOSE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ClassificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CODES")]
        CODES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ORGANIZATIONS")]
        ORGANIZATIONS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DefaultVersion
    {
        /// <summary>
        /// Default version identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }

        /// <summary>
        /// Default version name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionName { get; set; }

        /// <summary>
        /// Date and time of last modification on default version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Links
    {
        /// <summary>
        /// URL of the version of the referenced concept code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Href { get; set; }

        /// <summary>
        /// Type of the URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rel { get; set; }

        /// <summary>
        /// HTTP method of the URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603